const express = require("express");
const bodyParser = require("body-parser");
const { Pool } = require("pg");

const app = express();
const port = 3001;

app.use(bodyParser.json());

const pool = new Pool({
  user: "admin",
  host: "pm_postgres",
  database: "transaction",
  password: "admin@STM",
  port: 5432, // Default port for PostgreSQL
});

// Create a new transaction
app.post("/api/transaction", async (req, res) => {
  try {
    const {
      machine_No,
      operation_No,
      line,
      activity,
      tag_Type,
      cTag_Level,
      problem_Type,
      komarigoto,
      problem_Topic,
      counter_Measure,
      shift,
      group_PIC,
      editor_PIC,
      receive_Date,
      start_Date,
      finish_Date,
      end_Date,
      gl_MT2,
      gl_Prod2,
      attachment,
      test,
      cal_Status,
      date_MTsign,
      date_Prosign,
      created_By,
    } = req.body;

    const result = await pool.query(
      `INSERT INTO transaction (
        machine_no, operation_no, line, activity, tag_type, ctag_Level, problem_type, komarigoto,
        problem_topic, counter_measure, shift, group_pic, editor_pic, receive_date, start_date,
        finish_date, end_date, gl_mt2, gl_prod2, attachment, test, cal_status, date_mtsign, date_prosign, created_by
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25) RETURNING *`,
      [
        machine_No,
        operation_No,
        line,
        activity,
        tag_Type,
        cTag_Level,
        problem_Type,
        komarigoto,
        problem_Topic,
        counter_Measure,
        shift,
        group_PIC,
        editor_PIC,
        receive_Date,
        start_Date,
        finish_Date,
        end_Date,
        gl_MT2,
        gl_Prod2,
        attachment,
        test,
        cal_Status,
        date_MTsign,
        date_Prosign,
        created_By,
      ]
    );

    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
});

// Get all transactions
app.get("/api/transaction", async (req, res) => {
  try {
    const result = await pool.query("SELECT * FROM transaction");
    res.status(200).json(result.rows);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
